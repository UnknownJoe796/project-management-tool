package com.ivieleague.kotlin.web

import org.w3c.dom.*
import kotlin.browser.document

//From Layout.gen.kt
inline fun HTMLElement.html(setup: HTMLHtmlElement.() -> Unit) = (document.createElement("html") as HTMLHtmlElement).apply(setup).also { this.appendChild(it) }

inline fun HTMLElement.head(setup: HTMLHeadElement.() -> Unit) = (document.createElement("head") as HTMLHeadElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLHeadElement.link(setup: HTMLLinkElement.() -> Unit) = (document.createElement("link") as HTMLLinkElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLHeadElement.meta(setup: HTMLMetaElement.() -> Unit) = (document.createElement("meta") as HTMLMetaElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLHeadElement.style(setup: HTMLStyleElement.() -> Unit) = (document.createElement("style") as HTMLStyleElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.body(setup: HTMLBodyElement.() -> Unit) = (document.createElement("body") as HTMLBodyElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.base(setup: HTMLBaseElement.() -> Unit) = (document.createElement("base") as HTMLBaseElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.script(setup: HTMLScriptElement.() -> Unit) = (document.createElement("script") as HTMLScriptElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.article(setup: HTMLElement.() -> Unit) = (document.createElement("article") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.aside(setup: HTMLElement.() -> Unit) = (document.createElement("aside") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.div(setup: HTMLDivElement.() -> Unit) = (document.createElement("div") as HTMLDivElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.details(setup: HTMLElement.() -> Unit) = (document.createElement("details") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.figure(setup: HTMLElement.() -> Unit) = (document.createElement("figure") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.figureCaption(setup: HTMLElement.() -> Unit) = (document.createElement("figcaption") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.footer(setup: HTMLElement.() -> Unit) = (document.createElement("footer") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.header(setup: HTMLElement.() -> Unit) = (document.createElement("header") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.main(setup: HTMLElement.() -> Unit) = (document.createElement("main") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.nav(setup: HTMLElement.() -> Unit) = (document.createElement("nav") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.section(setup: HTMLElement.() -> Unit) = (document.createElement("section") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.time(setup: HTMLElement.() -> Unit) = (document.createElement("time") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.title(setup: HTMLElement.() -> Unit) = (document.createElement("title") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.heading1(setup: HTMLHeadingElement.() -> Unit) = (document.createElement("h1") as HTMLHeadingElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.heading2(setup: HTMLHeadingElement.() -> Unit) = (document.createElement("h2") as HTMLHeadingElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.heading3(setup: HTMLHeadingElement.() -> Unit) = (document.createElement("h3") as HTMLHeadingElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.heading4(setup: HTMLHeadingElement.() -> Unit) = (document.createElement("h4") as HTMLHeadingElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.heading5(setup: HTMLHeadingElement.() -> Unit) = (document.createElement("h5") as HTMLHeadingElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.heading6(setup: HTMLHeadingElement.() -> Unit) = (document.createElement("h6") as HTMLHeadingElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.paragraph(setup: HTMLParagraphElement.() -> Unit) = (document.createElement("p") as HTMLParagraphElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.blockQuote(setup: HTMLElement.() -> Unit) = (document.createElement("blockquote") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.br(setup: HTMLElement.() -> Unit) = (document.createElement("br") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.cite(setup: HTMLElement.() -> Unit) = (document.createElement("cite") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.code(setup: HTMLElement.() -> Unit) = (document.createElement("code") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.keyboardInput(setup: HTMLElement.() -> Unit) = (document.createElement("kbd") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.quote(setup: HTMLElement.() -> Unit) = (document.createElement("q") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.sample(setup: HTMLElement.() -> Unit) = (document.createElement("samp") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.summary(setup: HTMLElement.() -> Unit) = (document.createElement("summary") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.anchor(setup: HTMLAnchorElement.() -> Unit) = (document.createElement("a") as HTMLAnchorElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.audio(setup: HTMLAudioElement.() -> Unit) = (document.createElement("audio") as HTMLAudioElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLAudioElement.source(setup: HTMLSourceElement.() -> Unit) = (document.createElement("source") as HTMLSourceElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLAudioElement.track(setup: HTMLTrackElement.() -> Unit) = (document.createElement("track") as HTMLTrackElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.video(setup: HTMLVideoElement.() -> Unit) = (document.createElement("video") as HTMLVideoElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLVideoElement.source(setup: HTMLSourceElement.() -> Unit) = (document.createElement("source") as HTMLSourceElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLVideoElement.track(setup: HTMLTrackElement.() -> Unit) = (document.createElement("track") as HTMLTrackElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.button(setup: HTMLButtonElement.() -> Unit) = (document.createElement("button") as HTMLButtonElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.canvas(setup: HTMLCanvasElement.() -> Unit) = (document.createElement("canvas") as HTMLCanvasElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.dialog(setup: HTMLDialogElement.() -> Unit) = (document.createElement("dialog") as HTMLDialogElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.embed(setup: HTMLEmbedElement.() -> Unit) = (document.createElement("embed") as HTMLEmbedElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.form(setup: HTMLFormElement.() -> Unit) = (document.createElement("form") as HTMLFormElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLFormElement.fieldSet(setup: HTMLFieldSetElement.() -> Unit) = (document.createElement("fieldset") as HTMLFieldSetElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLFieldSetElement.legend(setup: HTMLLegendElement.() -> Unit) = (document.createElement("legend") as HTMLLegendElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.iFrame(setup: HTMLIFrameElement.() -> Unit) = (document.createElement("iframe") as HTMLIFrameElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.img(setup: HTMLImageElement.() -> Unit) = (document.createElement("img") as HTMLImageElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.input(setup: HTMLInputElement.() -> Unit) = (document.createElement("input") as HTMLInputElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.keygen(setup: HTMLKeygenElement.() -> Unit) = (document.createElement("keygen") as HTMLKeygenElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.label(setup: HTMLLabelElement.() -> Unit) = (document.createElement("label") as HTMLLabelElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.meter(setup: HTMLMeterElement.() -> Unit) = (document.createElement("meter") as HTMLMeterElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.embeddedObject(setup: HTMLObjectElement.() -> Unit) = (document.createElement("object") as HTMLObjectElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLObjectElement.param(setup: HTMLParamElement.() -> Unit) = (document.createElement("param") as HTMLParamElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.output(setup: HTMLOutputElement.() -> Unit) = (document.createElement("output") as HTMLOutputElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.textArea(setup: HTMLTextAreaElement.() -> Unit) = (document.createElement("textarea") as HTMLTextAreaElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.menu(setup: HTMLMenuElement.() -> Unit) = (document.createElement("menu") as HTMLMenuElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLMenuElement.item(setup: HTMLMenuItemElement.() -> Unit) = (document.createElement("menuitem") as HTMLMenuItemElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.select(setup: HTMLSelectElement.() -> Unit) = (document.createElement("select") as HTMLSelectElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLSelectElement.option(setup: HTMLOptionElement.() -> Unit) = (document.createElement("option") as HTMLOptionElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLSelectElement.group(setup: HTMLOptGroupElement.() -> Unit) = (document.createElement("optgroup") as HTMLOptGroupElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLOptGroupElement.option(setup: HTMLOptionElement.() -> Unit) = (document.createElement("option") as HTMLOptionElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.orderedList(setup: HTMLOListElement.() -> Unit) = (document.createElement("ol") as HTMLOListElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLOListElement.item(setup: HTMLElement.() -> Unit) = (document.createElement("li") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.unorderedList(setup: HTMLUListElement.() -> Unit) = (document.createElement("ul") as HTMLUListElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLUListElement.item(setup: HTMLElement.() -> Unit) = (document.createElement("li") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.dataList(setup: HTMLElement.() -> Unit) = (document.createElement("datalist") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.map(setup: HTMLMapElement.() -> Unit) = (document.createElement("map") as HTMLMapElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLMapElement.area(setup: HTMLAreaElement.() -> Unit) = (document.createElement("area") as HTMLAreaElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.table(setup: HTMLTableElement.() -> Unit) = (document.createElement("table") as HTMLTableElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableElement.body(setup: HTMLTableSectionElement.() -> Unit) = (document.createElement("tbody") as HTMLTableSectionElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableElement.foot(setup: HTMLTableSectionElement.() -> Unit) = (document.createElement("tfoot") as HTMLTableSectionElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableElement.head(setup: HTMLTableSectionElement.() -> Unit) = (document.createElement("thead") as HTMLTableSectionElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableElement.row(setup: HTMLTableRowElement.() -> Unit) = (document.createElement("tr") as HTMLTableRowElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableSectionElement.row(setup: HTMLTableRowElement.() -> Unit) = (document.createElement("tr") as HTMLTableRowElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableRowElement.header(setup: HTMLTableElement.() -> Unit) = (document.createElement("tr") as HTMLTableElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableRowElement.cell(setup: HTMLTableCellElement.() -> Unit) = (document.createElement("td") as HTMLTableCellElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableElement.columnGroup(setup: HTMLTableColElement.() -> Unit) = (document.createElement("colgroup") as HTMLTableColElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableColElement.column(setup: HTMLTableColElement.() -> Unit) = (document.createElement("col") as HTMLTableColElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLTableElement.caption(setup: HTMLTableCaptionElement.() -> Unit) = (document.createElement("caption") as HTMLTableCaptionElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLElement.definitionList(setup: HTMLDListElement.() -> Unit) = (document.createElement("dl") as HTMLDListElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLDListElement.term(setup: HTMLElement.() -> Unit) = (document.createElement("dt") as HTMLElement).apply(setup).also { this.appendChild(it) }
inline fun HTMLDListElement.definition(setup: HTMLElement.() -> Unit) = (document.createElement("dd") as HTMLElement).apply(setup).also { this.appendChild(it) }
